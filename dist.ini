
name                = CGI-Ex
author              = Paul Seamons
copyright_holder    = Paul Seamons
license             = Perl_5

[Git::NextVersion]
[Git::GatherDir]
exclude_filename    = LICENSE
exclude_filename    = dist.ini
[PruneCruft]

; PREREQUISITES
[AutoPrereqs]
; Optional modules used by CGI::Ex - don't require mod_perl et al.
skip                = Apache
skip                = CGI
skip                = ^HTML::FillInForm$
; Optional modules used by CGI::Ex::Auth
skip                = Crypt::Blowfish
skip                = Digest::MD5
skip                = MIME::Base64
; Optional modules used by CGI::Ex::Conf
skip                = ^Config::IniHash$
skip                = ^File::Find$
skip                = ^JSON$
skip                = ^Storable$
skip                = ^XML::Simple$
skip                = ^YAML$
; Optional modules used by CGI::Ex::Dump
skip                = ^B::Deparse$
skip                = ^Carp::Heavy$
skip                = ^perl$
; Optional modules used by test files
skip                = ^Tie::Handle$
[Prereqs / RuntimeRequires]
; Technically CGI::Ex doesn't require CGI, but for users that don't list CGI
; as an explicit dependency of their app we'll keep it here.
CGI                 = 0
perl                = 5.006
[Prereqs / RuntimeSuggests]
Config::IniHash     = 0
File::Find          = 0
JSON                = 0
Storable            = 0
XML::Simple         = 0
YAML                = 0
CGI                 = 4.45
[Prereqs / TestSuggests]
Tie::Handle         = 0

; TESTS
[ConsistentVersionTest]
[ExtraTests]
[MetaTests]
[PodSyntaxTests]
[Test::CPAN::Changes]
[Test::Compile]
[Test::ReportPrereqs]

; METADATA
[MetaJSON]
[MetaProvides::Package]
[MetaYAML]
[Manifest]
[ManifestSkip]
[MetaNoIndex]
directory           = samples
directory           = t
[Git::Contributors]
order_by            = commits
[GithubMeta]
issues              = 1

; MUNGE FILES
[OverridePkgVersion]
[PodVersion]

; GENERATE FILES
[License]
[CopyFilesFromBuild]
copy                = LICENSE
; Put a markdown README in the repo and a text README in the dist.
[ReadmeAnyFromPod / ReadmeMarkdownInRoot]
filename            = README.md
locaton             = root
type                = markdown
phase               = release
[ReadmeAnyFromPod / ReadmeTextInBuild]
filename            = README
location            = build
type                = text

[MakeMaker]

; RELEASE
[NextRelease]
[CheckChangesHasContent]
[Git::Check]
allow_dirty         = Changes
untracked_files     = ignore
[RunExtraTests]
[TestRelease]
[ConfirmRelease]
[UploadToCPAN]
[Git::Commit]
allow_dirty         = Changes
allow_dirty         = LICENSE
allow_dirty         = README.md
commit_msg          = Release %N %v%t%n%n%c
[Git::Tag]
; An empty tag message here creates a lightweight tag.
tag_message         =
[Git::Push]

